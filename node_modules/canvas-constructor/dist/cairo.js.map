{"version":3,"file":"cairo.js","sources":["../src/cairo.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unified-signatures */\nimport {\n\tCanvas as CairoCanvas,\n\tCanvasRenderingContext2D as CairoCanvasRenderingContext2D,\n\tcreateCanvas,\n\tImage as CairoImage,\n\tJpegConfig,\n\tJPEGStream,\n\tloadImage,\n\tPdfConfig,\n\tPDFStream,\n\tPngConfig,\n\tPNGStream,\n\tregisterFont\n} from 'canvas';\nimport { BaseCanvas } from './lib/BaseCanvas';\n\nexport type AntiAlias = CairoCanvasRenderingContext2D['antialias'];\nexport type TextDrawingMode = CairoCanvasRenderingContext2D['textDrawingMode'];\nexport type PatternQuality = CairoCanvasRenderingContext2D['patternQuality'];\n\nexport class Canvas extends BaseCanvas<CairoCanvas, CairoCanvasRenderingContext2D, CairoCanvas | CairoImage> {\n\tpublic constructor(width: number, height: number, type?: 'pdf' | 'svg') {\n\t\tsuper(createCanvas(width, height, type));\n\t}\n\n\t/**\n\t * Change the pattern quality\n\t * @param pattern The pattern quality.\n\t */\n\tpublic setPatternQuality(pattern: PatternQuality): this {\n\t\tthis.context.patternQuality = pattern;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the text drawing mode. Using glyph is much faster than path for drawing, and when using a PDF context will\n\t * embed the text natively, so will be selectable and lower file size. The downside is that cairo does not have any\n\t * subpixel precision for glyph, so this will be noticeably lower quality for text positioning in cases such as\n\t * rotated text. Also, strokeText in glyph will act the same as fillText, except using the stroke style for the fill.\n\t * @param mode The drawing mode.\n\t */\n\tpublic setTextDrawingMode(mode: TextDrawingMode): this {\n\t\tthis.context.textDrawingMode = mode;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set anti-aliasing mode.\n\t * @param antialias The antialias mode.\n\t */\n\tpublic setAntiAliasing(antialias: AntiAlias): this {\n\t\tthis.context.antialias = antialias;\n\t\treturn this;\n\t}\n\n\t/**\n\t * For PDF canvases, adds another page.\n\t * @param width The width of the new PDF page, defaults to the canvas's initial width.\n\t * @param height The height of the new PDF page, defaults to the canvas's initial height.\n\t */\n\tpublic addPage(width?: number, height?: number): this;\n\tpublic addPage(...args: readonly any[]): this {\n\t\tthis.context.addPage(...args);\n\t\treturn this;\n\t}\n\n\tpublic createPNGStream(config?: PngConfig): PNGStream;\n\tpublic createPNGStream(config: PngConfig | undefined, cb: (stream: PNGStream) => unknown): this;\n\tpublic createPNGStream(config?: PngConfig, cb?: (stream: PNGStream) => unknown): PNGStream | this {\n\t\tconst stream = this.canvas.createPNGStream(config);\n\t\tif (cb) {\n\t\t\tcb(stream);\n\t\t\treturn this;\n\t\t}\n\t\treturn stream;\n\t}\n\n\tpublic createJPEGStream(config?: JpegConfig): JPEGStream;\n\tpublic createJPEGStream(config: JpegConfig | undefined, cb: (stream: JPEGStream) => unknown): this;\n\tpublic createJPEGStream(config?: JpegConfig, cb?: (stream: PNGStream) => unknown): JPEGStream | this {\n\t\tconst stream = this.canvas.createJPEGStream(config);\n\t\tif (cb) {\n\t\t\tcb(stream);\n\t\t\treturn this;\n\t\t}\n\t\treturn stream;\n\t}\n\n\tpublic createPDFStream(config?: PdfConfig): PDFStream;\n\tpublic createPDFStream(config: PdfConfig | undefined, cb: (stream: PDFStream) => unknown): this;\n\tpublic createPDFStream(config?: PdfConfig, cb?: (stream: PNGStream) => unknown): PDFStream | this {\n\t\tconst stream = this.canvas.createPDFStream(config);\n\t\tif (cb) {\n\t\t\tcb(stream);\n\t\t\treturn this;\n\t\t}\n\t\treturn stream;\n\t}\n\n\t/**\n\t * For image canvases, encodes the canvas as a PNG. For PDF canvases, encodes the canvas as a PDF. For SVG canvases,\n\t * encodes the canvas as an SVG.\n\t */\n\tpublic toBuffer(): Buffer;\n\t/**\n\t * Encodes the canvas as a PNG.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBuffer(mimeType: 'image/png', config?: PngConfig): Buffer;\n\t/**\n\t * Encodes the canvas as a JPG.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBuffer(mimeType: 'image/jpeg', config?: JpegConfig): Buffer;\n\t/**\n\t * Encodes the canvas as a PDF.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBuffer(mimeType: 'application/pdf', config?: PdfConfig): Buffer;\n\t/**\n\t * Returns the unencoded pixel data, top-to-bottom. On little-endian (most) systems, the array will be ordered BGRA;\n\t * on big-endian systems, it will be ARGB.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t */\n\tpublic toBuffer(mimeType: 'raw'): Buffer;\n\tpublic toBuffer(...args: readonly any[]): Buffer {\n\t\t// @ts-expect-error: Complains about invalid overload (expects more than 0 overloads).\n\t\treturn this.canvas.toBuffer(...args);\n\t}\n\n\t/**\n\t * For image canvases, encodes the canvas as a PNG. For PDF canvases, encodes the canvas as a PDF. For SVG canvases,\n\t * encodes the canvas as an SVG.\n\t */\n\tpublic toBufferAsync(): Promise<Buffer>;\n\t/**\n\t * Encodes the canvas as a PNG.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBufferAsync(mimeType: 'image/png', config?: PngConfig): Promise<Buffer>;\n\t/**\n\t * Encodes the canvas as a JPG.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBufferAsync(mimeType: 'image/jpeg', config?: JpegConfig): Promise<Buffer>;\n\t/**\n\t * Encodes the canvas as a PDF.\n\t * @param mimeType the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t */\n\tpublic toBufferAsync(mimeType: 'application/pdf', config?: PdfConfig): Promise<Buffer>;\n\tpublic toBufferAsync(...args: readonly any[]): Promise<Buffer> {\n\t\treturn new Promise<Buffer>((resolve, reject) =>\n\t\t\t// @ts-expect-error: Complains about invalid overload (expects more than 0 overloads).\n\t\t\tthis.canvas.toBuffer((error: Error | null, buffer: Buffer | null): void => {\n\t\t\t\tif (error) reject(error);\n\t\t\t\telse resolve(buffer!);\n\t\t\t}, ...args)\n\t\t);\n\t}\n\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(): string;\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(mimeType: 'image/png'): string;\n\t/**\n\t * Render the canvas into a JPEG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @param quality The quality for the JPEG.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(mimeType: 'image/jpeg', quality?: number): string;\n\tpublic toDataURL(...args: readonly any[]): string {\n\t\t// @ts-expect-error: Complains about invalid overload (expects more than 0 overloads).\n\t\treturn this.canvas.toDataURL(...args);\n\t}\n\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @see https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async\n\t */\n\tpublic toDataURLAsync(): Promise<string>;\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @see https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async\n\t */\n\tpublic toDataURLAsync(mimeType: 'image/png'): Promise<string>;\n\t/**\n\t * Render the canvas into a JPEG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @param quality The quality for the JPEG.\n\t * @see https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async\n\t */\n\tpublic toDataURLAsync(mimeType: 'image/jpeg'): Promise<string>;\n\t/**\n\t * Render the canvas into a JPEG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @param config The render configuration.\n\t * @see https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async\n\t */\n\tpublic toDataURLAsync(mimeType: 'image/jpeg', config: import('canvas').JpegConfig): Promise<string>;\n\t/**\n\t * Render the canvas into a JPEG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @param quality The quality for the JPEG.\n\t * @see https://github.com/Automattic/node-canvas#canvastodataurl-sync-and-async\n\t */\n\tpublic toDataURLAsync(mimeType: 'image/jpeg', quality: number): Promise<string>;\n\tpublic toDataURLAsync(...args: readonly any[]): Promise<string> {\n\t\treturn new Promise<string>((resolve, reject) =>\n\t\t\t// @ts-expect-error: Complains about invalid overload (expects more than 0 overloads).\n\t\t\tthis.canvas.toDataURL(...args, (error, url) => {\n\t\t\t\tif (error) reject(error);\n\t\t\t\telse resolve(url);\n\t\t\t})\n\t\t);\n\t}\n}\n\nexport { BeveledRadiusOptions, GlobalCompositeOperation, GradientStop, PatternRepeat, PrintCircularOptions } from './lib/BaseCanvas';\nexport * from './lib/Filter';\nexport * from './lib/Util';\nexport { registerFont, CairoImage as Image };\nexport const resolveImage = loadImage;\n"],"names":["Canvas","BaseCanvas","constructor","width","height","type","super","createCanvas","setPatternQuality","pattern","this","context","patternQuality","setTextDrawingMode","mode","textDrawingMode","setAntiAliasing","antialias","addPage","args","createPNGStream","config","cb","stream","canvas","createJPEGStream","createPDFStream","toBuffer","toBufferAsync","Promise","resolve","reject","error","buffer","toDataURL","toDataURLAsync","url","resolveImage","loadImage"],"mappings":"oIAqBaA,UAAeC,aAC3BC,YAAmBC,EAAeC,EAAgBC,GACjDC,MAAMC,eAAaJ,EAAOC,EAAQC,IAO5BG,kBAAkBC,GAExB,OADAC,KAAKC,QAAQC,eAAiBH,EACvBC,KAUDG,mBAAmBC,GAEzB,OADAJ,KAAKC,QAAQI,gBAAkBD,EACxBJ,KAODM,gBAAgBC,GAEtB,OADAP,KAAKC,QAAQM,UAAYA,EAClBP,KASDQ,WAAWC,GAEjB,OADAT,KAAKC,QAAQO,WAAWC,GACjBT,KAKDU,gBAAgBC,EAAoBC,GAC1C,MAAMC,EAASb,KAAKc,OAAOJ,gBAAgBC,GAC3C,OAAIC,GACHA,EAAGC,GACIb,MAEDa,EAKDE,iBAAiBJ,EAAqBC,GAC5C,MAAMC,EAASb,KAAKc,OAAOC,iBAAiBJ,GAC5C,OAAIC,GACHA,EAAGC,GACIb,MAEDa,EAKDG,gBAAgBL,EAAoBC,GAC1C,MAAMC,EAASb,KAAKc,OAAOE,gBAAgBL,GAC3C,OAAIC,GACHA,EAAGC,GACIb,MAEDa,EAgCDI,YAAYR,GAElB,OAAOT,KAAKc,OAAOG,YAAYR,GA0BzBS,iBAAiBT,GACvB,OAAO,IAAIU,SAAgB,CAACC,EAASC,IAEpCrB,KAAKc,OAAOG,UAAS,CAACK,EAAqBC,KACtCD,EAAOD,EAAOC,GACbF,EAAQG,QACRd,KAsBDe,aAAaf,GAEnB,OAAOT,KAAKc,OAAOU,aAAaf,GAmC1BgB,kBAAkBhB,GACxB,OAAO,IAAIU,SAAgB,CAACC,EAASC,IAEpCrB,KAAKc,OAAOU,aAAaf,GAAM,CAACa,EAAOI,KAClCJ,EAAOD,EAAOC,GACbF,EAAQM,eAUJC,EAAeC"}