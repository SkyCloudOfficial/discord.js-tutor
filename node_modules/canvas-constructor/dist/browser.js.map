{"version":3,"file":"browser.js","sources":["../src/browser.ts"],"sourcesContent":["// eslint-disable-next-line spaced-comment\n/// <reference lib=\"dom\" />\n\n/* eslint-disable @typescript-eslint/unified-signatures */\nimport { BaseCanvas } from './lib/BaseCanvas';\n\nexport * from './lib/Filter';\nexport * from './lib/Util';\n\nexport class Canvas extends BaseCanvas<HTMLCanvasElement, CanvasRenderingContext2D, CanvasImageSource> {\n\t/**\n\t * Initialize canvas-constructor in a browser.\n\t * @param canvas An HTMLCanvasElement.\n\t * <script type=\"text/javascript\" src=\"canvasconstructor.main.min.js\"></script>\n\t * <script type=\"text/javascript\">\n\t * const canvasElement = document.getElementById('canvas');\n\t * new CanvasConstructor.Canvas(canvasElement)\n\t *     .setColor('green')\n\t *     .printRectangle(10, 10, 100, 100);\n\t * </script>\n\t */\n\tpublic constructor(canvas: HTMLCanvasElement, context?: CanvasRenderingContext2D) {\n\t\tsuper(canvas, context);\n\t}\n\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(): string;\n\t/**\n\t * Render the canvas into a PNG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(mimeType: 'image/png'): string;\n\t/**\n\t * Render the canvas into a JPEG Data URL.\n\t * @param type the standard MIME type for the image format to return.\n\t * @param quality The quality for the JPEG.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n\t */\n\tpublic toDataURL(mimeType: 'image/jpeg', quality?: number): string;\n\tpublic toDataURL(...args: readonly any[]): string {\n\t\treturn this.canvas.toDataURL(...args);\n\t}\n\n\t/**\n\t * <warn>This is for web usage only, node-canvas does not support this</warn>\n\t * Render the canvas into a Blob object representing the image contained in the canvas\n\t * @param callback A callback function with the resulting `Blob` object as a single argument.\n\t * @param type A string indicating the image format. The default type is `image/png`.\n\t * @param quality A number between 0 and 1 indicating image quality if the requested type is `image/jpeg` or `image/webp`.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n\t */\n\tpublic toBlob(callback: BlobCallback, type?: string, quality?: any): void {\n\t\treturn this.canvas.toBlob(callback, type, quality);\n\t}\n\n\t/**\n\t * <warn>This is for web usage only, node-canvas does not support this</warn>\n\t * Render the canvas into a Blob object representing the image contained in the canvas\n\t * @param type A string indicating the image format. The default type is `image/png`.\n\t * @param quality A number between 0 and 1 indicating image quality if the requested type is `image/jpeg` or `image/webp`.\n\t */\n\tpublic toBlobAsync(type?: string, quality?: any): Promise<Blob | null> {\n\t\treturn new Promise<Blob | null>((resolve) => this.canvas.toBlob(resolve, type, quality));\n\t}\n}\n\nexport const Image = HTMLImageElement;\nexport function resolveImage(src: string, options?: Partial<HTMLImageElement>): Promise<HTMLImageElement> {\n\treturn new Promise<HTMLImageElement>((resolve, reject) => {\n\t\t// eslint-disable-next-line no-undef\n\t\tconst image = Object.assign(document.createElement('img'), options) as HTMLImageElement;\n\n\t\tfunction cleanup() {\n\t\t\timage.onload = null;\n\t\t\timage.onerror = null;\n\t\t}\n\n\t\timage.onload = () => {\n\t\t\tcleanup();\n\t\t\tresolve(image);\n\t\t};\n\t\timage.onerror = () => {\n\t\t\tcleanup();\n\t\t\treject(new Error(`Failed to load the image \"${src}\"`));\n\t\t};\n\n\t\timage.src = src;\n\t});\n}\n"],"names":["Canvas","BaseCanvas","constructor","canvas","context","super","toDataURL","args","this","toBlob","callback","type","quality","toBlobAsync","Promise","resolve","Image","HTMLImageElement","src","options","reject","image","Object","assign","document","createElement","cleanup","onload","onerror","Error"],"mappings":"gHASaA,UAAeC,aAY3BC,YAAmBC,EAA2BC,GAC7CC,MAAMF,EAAQC,GAqBRE,aAAaC,GACnB,OAAOC,KAAKL,OAAOG,aAAaC,GAW1BE,OAAOC,EAAwBC,EAAeC,GACpD,OAAOJ,KAAKL,OAAOM,OAAOC,EAAUC,EAAMC,GASpCC,YAAYF,EAAeC,GACjC,OAAO,IAAIE,SAAsBC,GAAYP,KAAKL,OAAOM,OAAOM,EAASJ,EAAMC,YAIpEI,EAAQC,syBACQC,EAAaC,GACzC,OAAO,IAAIL,SAA0B,CAACC,EAASK,KAE9C,MAAMC,EAAQC,OAAOC,OAAOC,SAASC,cAAc,OAAQN,GAE3D,SAASO,IACRL,EAAMM,OAAS,KACfN,EAAMO,QAAU,KAGjBP,EAAMM,OAAS,KACdD,IACAX,EAAQM,IAETA,EAAMO,QAAU,KACfF,IACAN,EAAO,IAAIS,MAAM,6BAA6BX,QAG/CG,EAAMH,IAAMA"}