/// <reference lib="dom" />
import { BaseCanvas } from './lib/BaseCanvas';
export * from './lib/Filter';
export * from './lib/Util';
export declare class Canvas extends BaseCanvas<HTMLCanvasElement, CanvasRenderingContext2D, CanvasImageSource> {
    /**
     * Initialize canvas-constructor in a browser.
     * @param canvas An HTMLCanvasElement.
     * <script type="text/javascript" src="canvasconstructor.main.min.js"></script>
     * <script type="text/javascript">
     * const canvasElement = document.getElementById('canvas');
     * new CanvasConstructor.Canvas(canvasElement)
     *     .setColor('green')
     *     .printRectangle(10, 10, 100, 100);
     * </script>
     */
    constructor(canvas: HTMLCanvasElement, context?: CanvasRenderingContext2D);
    /**
     * Render the canvas into a PNG Data URL.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL
     */
    toDataURL(): string;
    /**
     * Render the canvas into a PNG Data URL.
     * @param type the standard MIME type for the image format to return.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL
     */
    toDataURL(mimeType: 'image/png'): string;
    /**
     * Render the canvas into a JPEG Data URL.
     * @param type the standard MIME type for the image format to return.
     * @param quality The quality for the JPEG.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL
     */
    toDataURL(mimeType: 'image/jpeg', quality?: number): string;
    /**
     * <warn>This is for web usage only, node-canvas does not support this</warn>
     * Render the canvas into a Blob object representing the image contained in the canvas
     * @param callback A callback function with the resulting `Blob` object as a single argument.
     * @param type A string indicating the image format. The default type is `image/png`.
     * @param quality A number between 0 and 1 indicating image quality if the requested type is `image/jpeg` or `image/webp`.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
     */
    toBlob(callback: BlobCallback, type?: string, quality?: any): void;
    /**
     * <warn>This is for web usage only, node-canvas does not support this</warn>
     * Render the canvas into a Blob object representing the image contained in the canvas
     * @param type A string indicating the image format. The default type is `image/png`.
     * @param quality A number between 0 and 1 indicating image quality if the requested type is `image/jpeg` or `image/webp`.
     */
    toBlobAsync(type?: string, quality?: any): Promise<Blob | null>;
}
export declare const Image: {
    new (): HTMLImageElement;
    prototype: HTMLImageElement;
};
export declare function resolveImage(src: string, options?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
//# sourceMappingURL=browser.d.ts.map